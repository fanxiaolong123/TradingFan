#!/usr/bin/env python3
"""
‰∫§Êòì‰ø°Âè∑ÂèØËßÜÂåñÊ®°ÂùóÊºîÁ§∫ËÑöÊú¨

ËØ•ËÑöÊú¨Â±ïÁ§∫‰∫ÜSignalVisualizerÁöÑÊâÄÊúâÂäüËÉΩÔºö
1. ‰ªéÁúüÂÆûÂõûÊµãÊï∞ÊçÆÂàõÂª∫ÂèØËßÜÂåñ
2. ÁîüÊàêÂ§öÁßçÊ†ºÂºèÁöÑÂõæË°®
3. ÂØºÂá∫‰ø°Âè∑Êï∞ÊçÆ
4. ÁîüÊàêPine Script‰ª£Á†Å

‰ΩøÁî®ÊñπÊ≥ïÔºö
    python demo_signal_visualizer.py

‰ΩúËÄÖÔºöÈáèÂåñ‰∫§ÊòìÁ≥ªÁªü
ÁâàÊú¨Ôºö1.0.0
ÂàõÂª∫Êó∂Èó¥Ôºö2025-07-16
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path

# Ê∑ªÂä†È°πÁõÆË∑ØÂæÑ
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from auto_trader.utils import SignalVisualizer, create_sample_data
from auto_trader.utils.logger import get_logger

# ÈÖçÁΩÆÊó•Âøó
logger = get_logger(__name__)


def load_real_backtest_data() -> pd.DataFrame:
    """
    Âä†ËΩΩÁúüÂÆûÁöÑÂõûÊµãÊï∞ÊçÆÂπ∂Ê∑ªÂä†Ê®°Êãü‰∫§Êòì‰ø°Âè∑
    
    Returns:
        pd.DataFrame: ÂåÖÂê´OHLCVÂíå‰ø°Âè∑ÁöÑÊï∞ÊçÆ
    """
    # Â∞ùËØïÂä†ËΩΩÁúüÂÆûÁöÑBTCÊï∞ÊçÆ
    data_path = Path("binance_historical_data/processed/BTCUSDT_1h_combined.csv")
    
    if not data_path.exists():
        logger.warning("ÁúüÂÆûÊï∞ÊçÆÊñá‰ª∂‰∏çÂ≠òÂú®Ôºå‰ΩøÁî®Á§∫‰æãÊï∞ÊçÆ")
        return create_sample_data()
    
    try:
        # Âä†ËΩΩÁúüÂÆûÊï∞ÊçÆ
        df = pd.read_csv(data_path)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        
        # ÂèñÊúÄËøë500Êù°Êï∞ÊçÆÁî®‰∫éÊºîÁ§∫
        df = df.tail(500).copy().reset_index(drop=True)
        
        # Ê∑ªÂä†Ê®°Êãü‰∫§Êòì‰ø°Âè∑ÔºàÂü∫‰∫éÁÆÄÂçïÁöÑÊäÄÊúØÊåáÊ†áÔºâ
        df['signal'] = 'hold'  # ÈªòËÆ§ÊåÅÊúâ
        
        # ËÆ°ÁÆóÁßªÂä®Âπ≥ÂùáÁ∫ø
        df['ma_short'] = df['close'].rolling(window=20).mean()
        df['ma_long'] = df['close'].rolling(window=50).mean()
        
        # ËÆ°ÁÆóRSI
        def calculate_rsi(prices, period=14):
            """ËÆ°ÁÆóRSIÊåáÊ†á"""
            delta = prices.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            return rsi
        
        df['rsi'] = calculate_rsi(df['close'])
        
        # ÁîüÊàê‰∫§Êòì‰ø°Âè∑
        for i in range(50, len(df)):  # ‰ªéÁ¨¨50Ë°åÂºÄÂßãÔºåÁ°Æ‰øùÊúâË∂≥Â§üÁöÑÂéÜÂè≤Êï∞ÊçÆ
            # ‰π∞ÂÖ•‰ø°Âè∑ÔºöÁü≠ÊúüÂùáÁ∫ø‰∏äÁ©øÈïøÊúüÂùáÁ∫ø ‰∏î RSI < 70
            if (df.loc[i, 'ma_short'] > df.loc[i, 'ma_long'] and
                df.loc[i-1, 'ma_short'] <= df.loc[i-1, 'ma_long'] and
                df.loc[i, 'rsi'] < 70):
                df.loc[i, 'signal'] = 'buy'
            
            # ÂçñÂá∫‰ø°Âè∑ÔºöÁü≠ÊúüÂùáÁ∫ø‰∏ãÁ©øÈïøÊúüÂùáÁ∫ø ‰∏î RSI > 30
            elif (df.loc[i, 'ma_short'] < df.loc[i, 'ma_long'] and
                  df.loc[i-1, 'ma_short'] >= df.loc[i-1, 'ma_long'] and
                  df.loc[i, 'rsi'] > 30):
                df.loc[i, 'signal'] = 'sell'
            
            # Ê≠¢Áõà‰ø°Âè∑ÔºöRSI > 80
            elif df.loc[i, 'rsi'] > 80:
                df.loc[i, 'signal'] = 'take_profit'
            
            # Ê≠¢Êçü‰ø°Âè∑ÔºöRSI < 20
            elif df.loc[i, 'rsi'] < 20:
                df.loc[i, 'signal'] = 'stop_loss'
        
        # ÈöèÊú∫Ê∑ªÂä†‰∏Ä‰∫õexit‰ø°Âè∑
        exit_indices = np.random.choice(df.index[50:], size=3, replace=False)
        df.loc[exit_indices, 'signal'] = 'exit'
        
        logger.info(f"Âä†ËΩΩÁúüÂÆûÊï∞ÊçÆÊàêÂäüÔºåÊï∞ÊçÆÈáè: {len(df)} Êù°")
        logger.info(f"‰ø°Âè∑ÁªüËÆ°: {df['signal'].value_counts().to_dict()}")
        
        return df[['timestamp', 'open', 'high', 'low', 'close', 'volume', 'signal']]
    
    except Exception as e:
        logger.error(f"Âä†ËΩΩÁúüÂÆûÊï∞ÊçÆÂ§±Ë¥•: {e}")
        logger.info("‰ΩøÁî®Á§∫‰æãÊï∞ÊçÆ")
        return create_sample_data()


def demo_basic_functionality():
    """ÊºîÁ§∫Âü∫Êú¨ÂäüËÉΩ"""
    print("\n" + "="*80)
    print("üéØ ‰∫§Êòì‰ø°Âè∑ÂèØËßÜÂåñÊ®°ÂùóÂäüËÉΩÊºîÁ§∫")
    print("="*80)
    
    # 1. Âä†ËΩΩÊï∞ÊçÆ
    print("\nüìä 1. Âä†ËΩΩÊï∞ÊçÆ...")
    data = load_real_backtest_data()
    print(f"   Êï∞ÊçÆÈáè: {len(data)} Êù°")
    print(f"   Êó∂Èó¥ËåÉÂõ¥: {data['timestamp'].min()} Âà∞ {data['timestamp'].max()}")
    
    # 2. ÂàõÂª∫ÂèØËßÜÂåñÂô®
    print("\nüîß 2. ÂàõÂª∫‰ø°Âè∑ÂèØËßÜÂåñÂô®...")
    visualizer = SignalVisualizer(data, symbol="BTCUSDT", timeframe="1h")
    
    # 3. Ëé∑Âèñ‰ø°Âè∑ÊëòË¶Å
    print("\nüìà 3. ‰ø°Âè∑ÁªüËÆ°ÊëòË¶Å:")
    summary = visualizer.get_signal_summary()
    print(f"   ÊÄª‰ø°Âè∑Êï∞: {summary['total_signals']}")
    print("   ‰ø°Âè∑Á±ªÂûãÂàÜÂ∏É:")
    for signal_type, count in summary['signal_types'].items():
        print(f"     - {signal_type}: {count} ‰∏™")
    print(f"   ‰ª∑Ê†ºËåÉÂõ¥: {summary['price_range']['min']:.2f} - {summary['price_range']['max']:.2f}")
    
    return visualizer


def demo_visualization_outputs(visualizer: SignalVisualizer):
    """ÊºîÁ§∫ÂèØËßÜÂåñËæìÂá∫ÂäüËÉΩ"""
    print("\nüìä 4. ÁîüÊàêÂèØËßÜÂåñÂõæË°®...")
    
    # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
    output_dir = Path("signal_visualization_demo")
    output_dir.mkdir(exist_ok=True)
    
    # 4.1 ÁîüÊàêHTML‰∫§‰∫íÂºèÂõæË°®
    print("   üì± ÁîüÊàêHTML‰∫§‰∫íÂºèÂõæË°®...")
    html_path = output_dir / "btc_signals_interactive.html"
    visualizer.plot_to_html(str(html_path), show_volume=True)
    
    # 4.2 ÁîüÊàêPNGÈùôÊÄÅÂõæË°®
    print("   üñºÔ∏è ÁîüÊàêPNGÈùôÊÄÅÂõæË°®...")
    png_path = output_dir / "btc_signals_static.png"
    visualizer.plot_to_png(str(png_path), figsize=(20, 12), show_volume=True)
    
    # 4.3 ÁîüÊàêplotly SVGÂõæË°®
    print("   üé® ÁîüÊàêPlotlyÂõæË°®...")
    try:
        fig = visualizer.plot_plotly(show_volume=True, save_path=str(output_dir / "btc_signals.svg"), auto_open=False)
        print("   ‚úÖ PlotlyÂõæË°®ÁîüÊàêÊàêÂäü")
    except Exception as e:
        print(f"   ‚ö†Ô∏è PlotlyÂõæË°®ÁîüÊàêÂ§±Ë¥•: {e}")
    
    print(f"   üìÅ ÂõæË°®Â∑≤‰øùÂ≠òÂà∞: {output_dir}/")


def demo_data_export(visualizer: SignalVisualizer):
    """ÊºîÁ§∫Êï∞ÊçÆÂØºÂá∫ÂäüËÉΩ"""
    print("\nüíæ 5. ÂØºÂá∫ÂäüËÉΩÊºîÁ§∫...")
    
    output_dir = Path("signal_visualization_demo")
    
    # 5.1 ÂØºÂá∫‰ø°Âè∑CSV
    print("   üìÑ ÂØºÂá∫‰ø°Âè∑Êï∞ÊçÆÂà∞CSV...")
    csv_path = output_dir / "btc_signals_export.csv"
    visualizer.export_signals_csv(str(csv_path))
    
    # ËØªÂèñÂπ∂ÊòæÁ§∫ÂØºÂá∫ÁöÑÊï∞ÊçÆ
    exported_data = pd.read_csv(csv_path)
    print(f"   ‚úÖ Â∑≤ÂØºÂá∫ {len(exported_data)} ‰∏™‰ø°Âè∑Âà∞ {csv_path}")
    print("   Ââç5Ë°åÊï∞ÊçÆÈ¢ÑËßà:")
    print(exported_data.head().to_string(index=False))


def demo_pinescript_generation(visualizer: SignalVisualizer):
    """ÊºîÁ§∫Pine Script‰ª£Á†ÅÁîüÊàê"""
    print("\nüå≤ 6. Pine Script‰ª£Á†ÅÁîüÊàê...")
    
    output_dir = Path("signal_visualization_demo")
    
    # ÁîüÊàêPine Script‰ª£Á†Å
    pine_path = output_dir / "btc_signals_tradingview.pine"
    pine_code = visualizer.generate_pinescript(str(pine_path))
    
    print(f"   ‚úÖ Pine Script‰ª£Á†ÅÂ∑≤ÁîüÊàê: {pine_path}")
    print("   ‰ª£Á†ÅÁâáÊÆµÈ¢ÑËßà:")
    print("-" * 60)
    print(pine_code[:500] + "...")
    print("-" * 60)
    
    # ÊòæÁ§∫‰ΩøÁî®ËØ¥Êòé
    print("\nüìù TradingView‰ΩøÁî®ËØ¥Êòé:")
    print("   1. Â§çÂà∂ÁîüÊàêÁöÑPine Script‰ª£Á†Å")
    print("   2. ÊâìÂºÄTradingView.com")
    print("   3. ÊâìÂºÄPine Editor")
    print("   4. Á≤òË¥¥‰ª£Á†ÅÂπ∂ÁÇπÂáª'Ê∑ªÂä†Âà∞ÂõæË°®'")
    print("   5. Âú®ÂõæË°®‰∏äÊü•Áúã‰ø°Âè∑ÁÇπÂ§çÁé∞")


def demo_integration_example():
    """ÊºîÁ§∫‰∏éÂõûÊµãÁ≥ªÁªüÈõÜÊàêÁöÑÁ§∫‰æã"""
    print("\nüîó 7. ÂõûÊµãÁ≥ªÁªüÈõÜÊàêÁ§∫‰æã...")
    
    # Ê®°Êãü‰ªéÂõûÊµãÂºïÊìéËé∑ÂèñÊï∞ÊçÆ
    print("   Ê®°ÊãüÂõûÊµãÁ≥ªÁªüË∞ÉÁî®...")
    
    # Á§∫‰æãÔºöÂÅáËÆæËøôÊòØ‰ªéÂõûÊµãÂºïÊìéËé∑ÂèñÁöÑÊï∞ÊçÆ
    backtest_results = {
        'data': load_real_backtest_data(),
        'strategy_name': 'BTC_Momentum_Strategy',
        'performance': {
            'total_return': 0.2405,
            'sharpe_ratio': 2.97,
            'max_drawdown': -0.0919
        }
    }
    
    # ÂàõÂª∫ÂèØËßÜÂåñÂô®
    visualizer = SignalVisualizer(
        backtest_results['data'], 
        symbol="BTCUSDT", 
        timeframe="1h"
    )
    
    # ‰∏ÄÈîÆÁîüÊàêÂÆåÊï¥Êä•Âëä
    output_dir = Path("signal_visualization_demo")
    report_name = f"{backtest_results['strategy_name']}_signal_report"
    
    print(f"   üìã ÁîüÊàêÁ≠ñÁï•Êä•Âëä: {report_name}")
    
    # ÁîüÊàêÊâÄÊúâËæìÂá∫
    visualizer.plot_to_html(str(output_dir / f"{report_name}.html"))
    visualizer.plot_to_png(str(output_dir / f"{report_name}.png"))
    visualizer.export_signals_csv(str(output_dir / f"{report_name}_signals.csv"))
    visualizer.generate_pinescript(str(output_dir / f"{report_name}.pine"))
    
    print("   ‚úÖ ÂÆåÊï¥Á≠ñÁï•‰ø°Âè∑Êä•ÂëäÂ∑≤ÁîüÊàê")


def demo_advanced_features():
    """ÊºîÁ§∫È´òÁ∫ßÂäüËÉΩ"""
    print("\nüöÄ 8. È´òÁ∫ßÂäüËÉΩÊºîÁ§∫...")
    
    # ÂàõÂª∫Êõ¥Â§çÊùÇÁöÑÊï∞ÊçÆ
    print("   üìä ÂàõÂª∫Â§çÊùÇ‰ø°Âè∑Êï∞ÊçÆ...")
    
    # ‰ΩøÁî®ÁúüÂÆûÊï∞ÊçÆÂπ∂Ê∑ªÂä†Êõ¥Â§ö‰ø°Âè∑Á±ªÂûã
    data = load_real_backtest_data()
    
    # ÂàõÂª∫Â§öÂ±ÇÊ¨°ÂèØËßÜÂåñÂô®
    visualizer = SignalVisualizer(data, symbol="BTCUSDT", timeframe="1h")
    
    # ÊºîÁ§∫ÊâπÈáèÂ§ÑÁêÜ
    output_dir = Path("signal_visualization_demo/advanced")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # ÁîüÊàê‰∏çÂêåÊó∂Èó¥ÊÆµÁöÑÂõæË°®
    print("   üéØ ÁîüÊàêÂ§öÊó∂Èó¥ÊÆµÂàÜÊûê...")
    
    # ÊåâÊúà‰ªΩÂàÜÁªÑÁîüÊàêÂõæË°®
    data['month'] = pd.to_datetime(data['timestamp']).dt.to_period('M')
    
    for month, month_data in data.groupby('month'):
        if len(month_data) < 10:  # Ë∑≥ËøáÊï∞ÊçÆÂ§™Â∞ëÁöÑÊúà‰ªΩ
            continue
            
        month_visualizer = SignalVisualizer(
            month_data.drop('month', axis=1), 
            symbol=f"BTCUSDT_{month}", 
            timeframe="1h"
        )
        
        month_output = output_dir / f"btc_signals_{month}.html"
        month_visualizer.plot_to_html(str(month_output), show_volume=False)
        
        print(f"     üìÖ {month} ÂõæË°®Â∑≤ÁîüÊàê")
    
    print("   ‚úÖ È´òÁ∫ßÂäüËÉΩÊºîÁ§∫ÂÆåÊàê")


def main():
    """‰∏ªÊºîÁ§∫ÂáΩÊï∞"""
    try:
        # Âü∫Êú¨ÂäüËÉΩÊºîÁ§∫
        visualizer = demo_basic_functionality()
        
        # ÂèØËßÜÂåñËæìÂá∫ÊºîÁ§∫
        demo_visualization_outputs(visualizer)
        
        # Êï∞ÊçÆÂØºÂá∫ÊºîÁ§∫
        demo_data_export(visualizer)
        
        # Pine ScriptÁîüÊàêÊºîÁ§∫
        demo_pinescript_generation(visualizer)
        
        # Á≥ªÁªüÈõÜÊàêÊºîÁ§∫
        demo_integration_example()
        
        # È´òÁ∫ßÂäüËÉΩÊºîÁ§∫
        demo_advanced_features()
        
        # ÊúÄÁªàÊÄªÁªì
        print("\n" + "="*80)
        print("üéâ ‰∫§Êòì‰ø°Âè∑ÂèØËßÜÂåñÊ®°ÂùóÊºîÁ§∫ÂÆåÊàêÔºÅ")
        print("="*80)
        print("\nüìÅ ÁîüÊàêÁöÑÊñá‰ª∂:")
        print("   signal_visualization_demo/")
        print("   ‚îú‚îÄ‚îÄ btc_signals_interactive.html    # ‰∫§‰∫íÂºèÂõæË°®")
        print("   ‚îú‚îÄ‚îÄ btc_signals_static.png          # ÈùôÊÄÅÂõæË°®")
        print("   ‚îú‚îÄ‚îÄ btc_signals_export.csv          # ‰ø°Âè∑Êï∞ÊçÆÂØºÂá∫")
        print("   ‚îú‚îÄ‚îÄ btc_signals_tradingview.pine    # Pine Script‰ª£Á†Å")
        print("   ‚îú‚îÄ‚îÄ BTC_Momentum_Strategy_*.*        # Á≠ñÁï•Êä•ÂëäÊñá‰ª∂")
        print("   ‚îî‚îÄ‚îÄ advanced/                       # È´òÁ∫ßÂäüËÉΩÊºîÁ§∫")
        
        print("\nüîß ‰ΩøÁî®ÊñπÊ≥ï:")
        print("   1. Êü•ÁúãHTMLÊñá‰ª∂Ëé∑Âæó‰∫§‰∫íÂºèÂõæË°®‰ΩìÈ™å")
        print("   2. ‰ΩøÁî®PNGÊñá‰ª∂‰Ωú‰∏∫Êä•ÂëäÊèíÂõæ")
        print("   3. ÂØºÂÖ•CSVÊñá‰ª∂ËøõË°åËøõ‰∏ÄÊ≠•ÂàÜÊûê")
        print("   4. Â§çÂà∂Pine Script‰ª£Á†ÅÂà∞TradingView")
        
        print("\nüí° ÈõÜÊàêÂà∞ÊÇ®ÁöÑÁ≥ªÁªü:")
        print("   from auto_trader.utils import SignalVisualizer")
        print("   visualizer = SignalVisualizer(your_data)")
        print("   visualizer.plot_to_html('output.html')")
        
    except Exception as e:
        logger.error(f"ÊºîÁ§∫ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {e}")
        raise


if __name__ == "__main__":
    main()